"""
Django settings for core project.
Generated by 'django-admin startproject' using Django 3.1.1.
For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path

# coding: utf-8
from decouple import Csv, config
from dj_database_url import parse as db_url
from django.contrib.messages import constants as messages
from datetime import timedelta
from rest_framework.settings import api_settings

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', cast=Csv())


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # Third Party Apps
    'rest_framework',
    'knox',
    'phonenumber_field',
    'phone_verify',
    'taggit',
    # The `notifications` app should go somewhere
    # after all the apps that are going to be generating notifications
    'notifications',

    # Local Apps
    'accounts',
    'addresses',
    'profiles',
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    # 'whitenoise.middleware.WhiteNoiseMiddleware', # ONLY FOR HEROKUAPP
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'

AUTH_USER_MODEL = 'accounts.User'  # custom User model
LOGIN_URL = '/api/auth/login/'
LOGIN_URL_REDIRECT = '/api/profiles/profile'
LOGOUT_URL = '/api/auth/logout/'
LOGOUT_REDIRECT_URL = '/api/auth/login/'

DEFAULT_AUTO_FIELD='django.db.models.AutoField'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases
# https://pypi.org/project/python-decouple/#id9

# DATABASE_URL=postgres://{user}:{password}@{hostname}:{port}/{database-name}
DATABASES = {
    'default': config(
        'DATABASE_URL',
        default='sqlite:///' + str(BASE_DIR / 'db.sqlite3'),
        cast=db_url
    )
}


# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'knox.auth.TokenAuthentication',
        # 'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication'
    ]
}

REST_KNOX = {
  'TOKEN_TTL': timedelta(hours=24),
  'USER_SERIALIZER': 'accounts.auth.api.serializers.UserSerializer',
  'AUTH_HEADER_PREFIX': 'Bearer',
}

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'

STATICFILES_DIRS = []

STATIC_ROOT = BASE_DIR.joinpath("static_cdn", "static_root")


MEDIA_URL = '/media/'
MEDIA_ROOT = BASE_DIR.joinpath("static_cdn", "media_root")

PROTECTED_ROOT = BASE_DIR.joinpath("static_cdn", "protected_media")

# django messages
MESSAGE_STORAGE = 'django.contrib.messages.storage.cookie.CookieStorage'
MESSAGE_TAGS = {
    messages.SUCCESS: 'success',
    messages.ERROR: 'danger',
    messages.WARNING: 'warning',
    messages.INFO: 'info',
}


# Email Settings
EMAIL_BACKEND = config(
    'EMAIL_BACKEND', default='django.core.mail.backends.smtp.EmailBackend')
EMAIL_HOST = config('EMAIL_HOST', default='localhost')
EMAIL_PORT = config('EMAIL_PORT', default=25, cast=int)
EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')
EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=False, cast=bool)
# EMAIL_USE_SSL = config('EMAIL_USE_SSL', default=False, cast=bool)


# Phone_verify Settings
PHONE_VERIFICATION = {
    # `BACKEND` Path to the custom backend class which we will be creating in further steps
    'BACKEND': config(
        'PHONE_VERIFICATION_BACKEND', default='accounts.sms_backends.bdsms.BdsmsBackend'),
    'OPTIONS': {
        # define options required for your service
        'BDSMS_TOKEN': config('PHONE_VERIFICATION_OPTIONS_BDSMS_TOKEN', default=''),
        'BDSMS_ENDPOINT': config('PHONE_VERIFICATION_OPTIONS_BDSMS_ENDPOINT', default=''),
    },
    'TOKEN_LENGTH': config('PHONE_VERIFICATION_TOKEN_LENGTH', default=6, cast=int),
    'MESSAGE': config('PHONE_VERIFICATION_MESSAGE', default="Welcome to {app}! Please use security code {security_code} to proceed."),
    'APP_NAME': config('PHONE_VERIFICATION_APP_NAME', default='App'),
    # In seconds only
    'SECURITY_CODE_EXPIRATION_TIME': config('PHONE_VERIFICATION_SECURITY_CODE_EXPIRATION_TIME', default=300, cast=int),
    # If False, then a security code can be used multiple times for verification
    'VERIFY_SECURITY_CODE_ONLY_ONCE': config('PHONE_VERIFICATION_VERIFY_SECURITY_CODE_ONLY_ONCE', default=True, cast=bool),
}

# Settings for phone_verify utils
PHONE_VERIFICATION_UTILS = {
    # SOME HARD CODDED STRING THAT IS NEED IN PHONE VERIFICATION UTILS
    # CONSIDER TO MANUALLY UPDATE
    'SCHEME': config('PHONE_VERIFICATION_SCHEME', default='http'),
    'HOST': config('PHONE_VERIFICATION_HOST', default='127.0.0.1:8000'),
    'PHONE_VERIFY_REGISTER_PATH': config('PHONE_VERIFICATION_PHONE_VERIFY_REGISTER_PATH', default='/api/phone-verify/register'),
    'PHONE_VERIFY_VERIFY_PATH': config('PHONE_VERIFICATION_PHONE_VERIFY_VERIFY_PATH', default='/api/phone-verify/verify'),
}
